// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "debtomate/module/entities"

	mock "github.com/stretchr/testify/mock"
)

// BorrowersServiceInterface is an autogenerated mock type for the BorrowersServiceInterface type
type BorrowersServiceInterface struct {
	mock.Mock
}

// GetAllBorrowers provides a mock function with given fields: page, pageSize
func (_m *BorrowersServiceInterface) GetAllBorrowers(page int, pageSize int) ([]*entities.BorrowersModels, int64, error) {
	ret := _m.Called(page, pageSize)

	var r0 []*entities.BorrowersModels
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.BorrowersModels, int64, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.BorrowersModels); ok {
		r0 = rf(page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.BorrowersModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) int64); ok {
		r1 = rf(page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBorrowersPage provides a mock function with given fields: currentPage, pageSize
func (_m *BorrowersServiceInterface) GetBorrowersPage(currentPage int, pageSize int) (int, int, int, int, error) {
	ret := _m.Called(currentPage, pageSize)

	var r0 int
	var r1 int
	var r2 int
	var r3 int
	var r4 error
	if rf, ok := ret.Get(0).(func(int, int) (int, int, int, int, error)); ok {
		return rf(currentPage, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(currentPage, pageSize)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(currentPage, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int) int); ok {
		r2 = rf(currentPage, pageSize)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int, int) int); ok {
		r3 = rf(currentPage, pageSize)
	} else {
		r3 = ret.Get(3).(int)
	}

	if rf, ok := ret.Get(4).(func(int, int) error); ok {
		r4 = rf(currentPage, pageSize)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// NewBorrowersServiceInterface creates a new instance of BorrowersServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBorrowersServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BorrowersServiceInterface {
	mock := &BorrowersServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
